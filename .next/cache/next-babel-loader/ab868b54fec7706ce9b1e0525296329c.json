{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport App, { Container } from 'next/app';\nimport React from 'react';\nimport globalStyles from './global.less';\nimport Header from '@/components/header';\nimport { addLocaleData, IntlProvider } from 'react-intl'; //导入中英文对象\n\nimport _ZH from '../locales/zh-CN';\nlet appLocale = {\n  messages: _objectSpread({}, zhMessages),\n  locale: 'zh-CN',\n  data: appLocaleData\n};\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    router,\n    ctx\n  }) {\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  getLocale(languages) {\n    const appLocale = this.getLocaleDatas(languages);\n    addLocaleData(...appLocale.data);\n    return appLocale;\n  }\n\n  getLocaleDatas(lang) {\n    let result = {};\n\n    switch (lang) {\n      case 'zh-CN':\n        result = _ZH;\n        break;\n\n      case 'en-US':\n        result = _EN;\n        break;\n\n      default:\n        result = _ZH;\n    }\n\n    return result;\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props; // router.query.lang当前语言 - 需要通过修改server.js传入query.lang\n    // 根据url设置语言\n\n    const languages = router.query.lang || 'zh-CN';\n    const appLocale = this.getLocale(languages);\n    return __jsx(React.Fragment, null, __jsx(Header, null), __jsx(Component, pageProps), __jsx(_JSXStyle, {\n      id: globalStyles.__hash\n    }, globalStyles));\n  }\n\n}","map":{"version":3,"sources":["/Users/lihao/Desktop/中和物联网/new-website/pages/_app.js"],"names":["App","Container","React","globalStyles","Header","addLocaleData","IntlProvider","_ZH","appLocale","messages","zhMessages","locale","data","appLocaleData","MyApp","getInitialProps","Component","router","ctx","pageProps","getLocale","languages","getLocaleDatas","lang","result","_EN","render","props","query"],"mappings":";;;;;;;;;AAAA,OAAOA,GAAP,IAAaC,SAAb,QAA6B,UAA7B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C,C,CAEA;;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AAEA,IAAIC,SAAS,GAAG;AACdC,EAAAA,QAAQ,oBACHC,UADG,CADM;AAIdC,EAAAA,MAAM,EAAE,OAJM;AAKdC,EAAAA,IAAI,EAAEC;AALQ,CAAhB;AASA,eAAe,MAAMC,KAAN,SAAoBd,GAApB,CAAwB;AACrC,eAAae,eAAb,CAA6B;AAACC,IAAAA,SAAD;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA;AAApB,GAA7B,EAAuD;AACrD,QAAIC,SAAS,GAAG,EAAhB;;AAEA,QAAIH,SAAS,CAACD,eAAd,EAA+B;AAC7BI,MAAAA,SAAS,GAAG,MAAMH,SAAS,CAACD,eAAV,CAA0BG,GAA1B,CAAlB;AACD;;AAED,WAAO;AAACC,MAAAA;AAAD,KAAP;AACD;;AAEDC,EAAAA,SAAS,CAACC,SAAD,EAAW;AAClB,UAAMb,SAAS,GAAG,KAAKc,cAAL,CAAoBD,SAApB,CAAlB;AACAhB,IAAAA,aAAa,CAAC,GAAGG,SAAS,CAACI,IAAd,CAAb;AACA,WAAOJ,SAAP;AACD;;AAEDc,EAAAA,cAAc,CAACC,IAAD,EAAO;AACnB,QAAIC,MAAM,GAAG,EAAb;;AACA,YAAQD,IAAR;AACE,WAAK,OAAL;AACEC,QAAAA,MAAM,GAAGjB,GAAT;AACA;;AACF,WAAK,OAAL;AACEiB,QAAAA,MAAM,GAAGC,GAAT;AACA;;AACF;AACED,QAAAA,MAAM,GAAGjB,GAAT;AARJ;;AAUA,WAAOiB,MAAP;AACD;;AAEDE,EAAAA,MAAM,GAAG;AACP,UAAM;AAACV,MAAAA,SAAD;AAAYG,MAAAA;AAAZ,QAAyB,KAAKQ,KAApC,CADO,CAEP;AACA;;AACA,UAAMN,SAAS,GAAGJ,MAAM,CAACW,KAAP,CAAaL,IAAb,IAAqB,OAAvC;AACA,UAAMf,SAAS,GAAG,KAAKY,SAAL,CAAeC,SAAf,CAAlB;AAGA,WAAO,4BACL,MAAC,MAAD,OADK,EAEL,MAAC,SAAD,EAAeF,SAAf,CAFK;AAAA;AAAA,qBAAP;AASD;;AAjDoC","sourcesContent":["import App, {Container} from 'next/app'\nimport React from 'react'\nimport globalStyles from './global.less'\nimport Header from '@/components/header'\nimport { addLocaleData, IntlProvider } from 'react-intl';\n\n//导入中英文对象\nimport _ZH from '../locales/zh-CN';\n\nlet appLocale = {\n  messages: {\n    ...zhMessages,\n  },\n  locale: 'zh-CN',\n  data: appLocaleData,\n};\n\n\nexport default class MyApp extends App {\n  static async getInitialProps({Component, router, ctx}) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return {pageProps}\n  }\n\n  getLocale(languages){\n    const appLocale = this.getLocaleDatas(languages);\n    addLocaleData(...appLocale.data);\n    return appLocale;\n  }\n\n  getLocaleDatas(lang) {\n    let result = {};\n    switch (lang) {\n      case 'zh-CN':\n        result = _ZH;\n        break;\n      case 'en-US':\n        result = _EN;\n        break;\n      default:\n        result = _ZH;\n    }\n    return result;\n  }\n\n  render() {\n    const {Component, pageProps} = this.props\n    // router.query.lang当前语言 - 需要通过修改server.js传入query.lang\n    // 根据url设置语言\n    const languages = router.query.lang || 'zh-CN';\n    const appLocale = this.getLocale(languages);\n\n\n    return <>\n      <Header/>\n      <Component {...pageProps} />\n      <style global jsx>\n        {\n          globalStyles\n        }\n      </style>\n    </>\n  }\n}\n"]},"metadata":{},"sourceType":"module"}